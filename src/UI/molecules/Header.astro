---
import { Image } from 'astro:assets';
import logo from '../../assets/img/logo.svg';
import menu from '../../assets/img/menu.svg';
import { useTranslations } from '../../i18n/utils';
import { languageList } from '../../i18n/ui';
const currentLang = Astro.currentLocale || 'es';
const translateLabels = useTranslations(currentLang as keyof typeof languageList);
---

<header
	id='header'
	class='flex justify-between items-center w-full pt-2 sm:p-[10px] sm:px-[40px] fixed top-0 z-20 transition-transform duration-300'
>
	<div class='flex items-center gap-2'>
		<Image
			src={logo}
			alt='logo de Cristian Montoya'
			class='w-[60px] h-[60px] sm:w-[50px] sm:h-[50px] ml-[10px]'
			loading='eager'
			draggable='false'
		/>
		<button
			id='language-toggle'
			class='duration-300 ease-in-out blue-text rounded-full px-6 py-2 hover:bg-[#43CFF4]/20 hover:shadow-[0px_0px_10px_0px_#43CFF4] border border-[#43CFF4]'
			title={translateLabels('nav.language.tooltip')}
		>
			{translateLabels('nav.language')}
		</button>
	</div>
	<nav id='nav'>
		<Image
			src={menu}
			alt='icono menu'
			class='w-[48px] h-[48px] sm:hidden mr-[10px]'
			loading='eager'
			draggable='false'
		/>

		<div class='flex-row lg:gap-x-[30px] gap-x-[0px] lg:text-[20px] text-[20px] hidden sm:flex'>
			<a
				href='#home'
				class='duration-300 ease-in-out nav-link blue-text rounded-full px-8 hover:bg-[#43CFF4]/20 hover:shadow-[0px_0px_10px_0px_#43CFF4]'
				>{translateLabels('nav.home')}</a
			>
			<a
				href='#experience'
				class='duration-300 ease-in-out nav-link blue-text rounded-full px-8 hover:bg-[#43CFF4]/20 hover:shadow-[0px_0px_10px_0px_#43CFF4]'
				>{translateLabels('nav.experience')}</a
			>
			<a
				href='#about-me'
				class='duration-300 ease-in-out nav-link blue-text rounded-full px-8 hover:bg-[#43CFF4]/20 hover:shadow-[0px_0px_10px_0px_#43CFF4]'
				>{translateLabels('nav.about')}</a
			>
			<a
				href='#projects'
				class='duration-300 ease-in-out nav-link blue-text rounded-full px-8 hover:bg-[#43CFF4]/20 hover:shadow-[0px_0px_10px_0px_#43CFF4]'
				>{translateLabels('nav.projects')}</a
			>
		</div>
	</nav>
</header>

<script>
	function handleHeaderScroll() {
		let lastScrollTop = 0;
		const header = document.getElementById('header');

		return () => {
			const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

			if (scrollTop <= 100) {
				header?.classList.remove('-translate-y-full');
				header?.classList.remove('backdrop-blur-md', 'shadow-lg');
				return;
			}

			header?.classList.add('backdrop-blur-md', 'shadow-lg');

			if (scrollTop > lastScrollTop) {
				header?.classList.add('-translate-y-full');
			} else {
				header?.classList.remove('-translate-y-full');
			}

			lastScrollTop = scrollTop;
		};
	}

	function handleNavSelection() {
		const navLinks = document.querySelectorAll('.nav-link');
		const sections = document.querySelectorAll('section[id]');
		navLinks.forEach((link) => {
			link.addEventListener('click', function (this: HTMLElement, e: Event) {
				navLinks.forEach((l) => {
					l.classList.remove('bg-[#43CFF4]/20', 'shadow-[0px_0px_10px_0px_#43CFF4]');
				});
				this.classList.add('bg-[#43CFF4]/20', 'shadow-[0px_0px_10px_0px_#43CFF4]');
			});
		});
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					const id = entry.target.getAttribute('id');
					const navLink = document.querySelector(`nav a[href="#${id}"]`);

					if (entry.isIntersecting) {
						navLinks.forEach((link) => link.classList.remove('bg-[#43CFF4]/20', 'shadow-[0px_0px_10px_0px_#43CFF4]'));
						if (navLink) navLink.classList.add('bg-[#43CFF4]/20', 'shadow-[0px_0px_10px_0px_#43CFF4]');
					}
				});
			},
			{
				rootMargin: '0px 0px -70% 0px',
				threshold: 0.2,
			}
		);
		sections.forEach((section) => {
			observer.observe(section);
		});
	}

	function handleLanguageToggle() {
		const languageToggle = document.getElementById('language-toggle');

		languageToggle?.addEventListener('click', () => {
			const currentPath = window.location.pathname;
			const currentLang = currentPath.startsWith('/en') ? 'en' : 'es';
			const newLang = currentLang === 'es' ? 'en' : 'es';

			// Construir la nueva URL
			let newPath = '';
			if (newLang === 'en') {
				newPath = '/en' + (currentPath.startsWith('/es') ? currentPath.substring(3) : currentPath);
			} else {
				newPath = currentPath.startsWith('/en') ? currentPath.substring(3) : currentPath;
			}

			// Redirigir a la nueva URL
			window.location.href = newPath;
		});
	}

	window.addEventListener('scroll', handleHeaderScroll());
	document.addEventListener('DOMContentLoaded', () => {
		handleNavSelection();
		handleLanguageToggle();
	});
</script>
